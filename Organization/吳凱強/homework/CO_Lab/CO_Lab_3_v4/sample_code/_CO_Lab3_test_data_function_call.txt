// This file demonstrate C function call in assembly
// int foo(int x, int y)
// {
//   int a;
//   a = x + y;
//   return a;
// }
//
// foo(3, 8);
// exit() // Jump to execute nop
//
// $0 ($0): Constant 0
// $v0-$v1 ($2-$3): Return value registers
// $a0-$a3 ($4-$7): Function call arguement registers
// $t0-$t9 ($8-$15, $24, $25): Temporary register
// $s0-$s7 ($16-$23): Registers that need to be saved
// $sp ($29): Stack pointer
// $ra ($31): Store return address
// Comments will begin with //
// Assembly code will be enclosed with /* */

// Set sp to 0x2c(44) to inspect the stack
/* addi $sp, $r0, 0x2c */
00100000000111010000000000101100

// Set up foo(1, 2) arguments
/* addi $a0, $0, 3 */
00100000000001000000000000000011
/* addi $a1, $0, 8 */
00100000000001010000000000001000

// foo(3, 8)
/* jal foo */
00001100000000000000000000000101

// exit(), jump to nop
/* j exit */
00001000000000000000000000010100

/* foo: */
// After entering a function call, we need to do multiple things
// 1. Grow a stack frame
// 2. Save argument to stack
// 3. Save registers that need to be saved $s0-$s7 (to simplify code, we will only save $s0 and $s1)
// 4. Save return address
// 5. Initialize local variable

// We need six word space in stack
/* addi $sp, $sp, (-24) */
00100011101111011111111111101000

// Save arugment into stack
/* sw $a0, 0($sp) */
10101111101001000000000000000000
/* sw $a1, 4($sp) */
10101111101001010000000000000100

// Save registers that need to be saved by callee. $s0 and $s1 for simplicity
/* sw $s0, 8($sp) */
10101111101100000000000000001000
/* sw $s1, 12($sp) */
10101111101100010000000000001100

// Save $ra register
/* sw $ra, 16($sp) */
10101111101111110000000000010000

// Local variable 'a' is located at 20($sp)

// Since x and y is still in $a0 and $a1, we don't need to load it from stack
// Save the result to $t0 temporary register
/* addu $t0, $a0, $a1 */
00000000100001010100000000100001

// Move the result to v0 to save return value
/* addu $v0, $0, $t0 */
00000000000010000001000000100001

// Pop the registers in stack
/* lw $a0, 0($sp) */
10001111101001000000000000000000
/* lw $a1, 4($sp) */
10001111101001010000000000000100
/* lw $s0, 8($sp) */
10001111101100000000000000001000
/* lw $s1, 12($sp) */
10001111101100010000000000001100
/* lw $ra, 16($sp) */
10001111101111110000000000010000

// Remove stack frame
/* addi $sp, $sp, 24 */
00100011101111010000000000011000

// Return
/* jr $ra */
00000011111000000000000000001000

/* exit: */
// nop

//r0 =         0 | r1 =         1 | r2 =        11 | r3 =         3
//r4 =         3 | r5 =         8 | r6 =         6 | r7 =         7
//r8 =        11 | r9 =         9 | r10=        -1 | r11=        -2
//r29=        44 | r31=        16
//
//0x0  =         4 | 0x4  =         5 | 0x8  =         6 | 0xc  =         7
//0x10 =         8 | 0x14 =         3 | 0x18 =         8 | 0x1c =         0
//0x20 =         0 | 0x24 =        16 | 0x28 =         0 | 0x2c =         0
