$date
	Wed Mar 11 18:31:55 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$scope module demo $end
$var wire 1 ! clk_i $end
$var wire 4 " input1 [3:0] $end
$var wire 4 # input2 [3:0] $end
$var wire 1 $ reset_n $end
$var wire 1 % sel $end
$var wire 8 & selected [7:0] $end
$var wire 8 ' multiplied [7:0] $end
$var wire 8 ( added [7:0] $end
$scope module add $end
$var wire 1 ! clk_i $end
$var wire 4 ) input1 [3:0] $end
$var wire 4 * input2 [3:0] $end
$var wire 1 $ reset_n $end
$var reg 8 + added [7:0] $end
$upscope $end
$scope module multiply $end
$var wire 1 ! clk_i $end
$var wire 4 , input1 [3:0] $end
$var wire 4 - input2 [3:0] $end
$var wire 1 $ reset_n $end
$var reg 8 . multiplied [7:0] $end
$upscope $end
$scope module mux $end
$var wire 1 ! clk_i $end
$var wire 8 / input1 [7:0] $end
$var wire 8 0 input2 [7:0] $end
$var wire 1 $ reset_n $end
$var wire 1 % sel $end
$var reg 8 1 result [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 1
b1111 0
b1000 /
b1111 .
b11 -
b101 ,
b1000 +
b11 *
b101 )
b1000 (
b1111 '
bx &
x%
1$
b11 #
b101 "
1!
$end
#5000
0!
#10000
b0 &
b0 1
b0 '
b0 .
b0 0
b0 (
b0 +
b0 /
1!
0$
#15000
0!
#20000
b1000 (
b1000 +
b1000 /
b1111 '
b1111 .
b1111 0
1!
0%
1$
#25000
0!
#30000
b1000 &
b1000 1
1!
#35000
0!
#40000
b1111 &
b1111 1
1!
1%
#45000
0!
#50000
1!
#55000
0!
b111 #
b111 *
b111 -
b100 "
b100 )
b100 ,
#60000
b1011 (
b1011 +
b1011 /
b11100 '
b11100 .
b11100 0
1!
#65000
0!
#70000
b11100 &
b11100 1
1!
#75000
0!
0%
#80000
b1011 &
b1011 1
1!
#85000
0!
#90000
1!
#95000
0!
1%
#100000
b11100 &
b11100 1
1!
#105000
0!
#110000
1!
#115000
0!
